# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  welcome: circleci/welcome-orb@0.4.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  create-infrastructure:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
    - image: amazon/aws-cli
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
    - checkout
    - run:
        name: "Create Cloudformation Stack"
        command: |
          aws cloudformation deploy \
            --template-file template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1
    - run:
        name: "Purposeful error"
        command: return 1
    - destroy_environment

  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
    - image: python:3.7-alpine3.11
    steps:
    - checkout
    - add_ssh_keys:
        # You can get this ID in the section where you registered the SSH Key
        fingerprints: ["f7:f3:4d:93:01:c8:49:6c:a2:16:33:e0:53:2f:49:f1"] 
    - run:
        name: Install Ansible
        command: |
          apk add --update ansible
    - run:
        name: Run Playbook and Configure server
        command: |
          ansible-playbook -i inventory.txt main-remote.yml

  smoke_test:
    docker:
    - image: alpine:latest
    steps:
      - run:
          name: Test job
          command: return 1
      # - destroy_environment #this command can not run in this docker image because missing aws cli

  create_and_deploy_front_end:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Execute bucket.yml - Create Cloudformation Stack
        command: |
          aws cloudformation deploy \
          --template-file bucket.yml \
          --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
          --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
    # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
    - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete --exclude "*" --include "*.html"

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
    - checkout
    - run: yum install -y tar gzip
    - run:
        name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
        command: |
          aws cloudformation \
          list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
          --no-paginate --output text > ~/textfile.txt
    - persist_to_workspace:
        root: ~/
        paths: 
          - textfile.txt 

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Execute cloudfront.yml
        command: |
          aws cloudformation deploy \
          --template-file cloudfront.yml \
          --stack-name production-distro \
          --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
    - checkout
    - run: yum install -y tar gzip
    - attach_workspace:
        at: ~/
    - run:
        name: Destroy the previous S3 bucket and CloudFormation stack. 
        # Use $OldBucketID environment variable or mybucket644752792305 below.
        # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
        command: |
          export OldBucketID=$(cat ~/textfile.txt)
          aws s3 rm "s3://${OldBucketID}" --recursive

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  deployments:
    jobs:
    # - create-infrastructure
    # - configure_infrastructure
    # - smoke_test
    - create_and_deploy_front_end
    - promote_to_production:
        requires: 
        - create_and_deploy_front_end
    - get_last_deployment_id
    - clean_up_old_front_end:
        requires:
        - get_last_deployment_id
        - promote_to_production